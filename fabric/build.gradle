import java.nio.file.Paths
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
}

plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
}

sourceSets {
    main {
        java {
            srcDir '../common/mod/java'
            srcDir '../common/mixin-plugin/java'
        }
        resources {
            srcDir '../common/mod/resources'
            srcDir 'src/generated/resources'
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
    annotationProcessor files('../annotation-processor/build/libs/annotation-processor.jar')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

tasks.register('buildAnnotationProcessor', {
    doFirst {
        def annotationProcessorJar = file('../annotation-processor/build/libs/annotation-processor.jar')
        if (!annotationProcessorJar.exists()) {
            println 'Annotation processor JAR not found. Building annotation processor...'
            def buildResult = exec {
                def gradlew = Os.isFamily(Os.FAMILY_WINDOWS) ? 'gradlew.bat' : 'gradlew'
                commandLine "../annotation-processor/$gradlew", '-p', '../annotation-processor', 'build'
            }
            if (buildResult.exitValue != 0) {
                throw new GradleException('Failed to build the annotation processor project.')
            }
        }
    }
})

tasks.withType(JavaCompile).configureEach {
    dependsOn('buildAnnotationProcessor')
}

tasks.build.doLast {
    def devJar = file(jar.archiveFile)
    // assuming loom set path to \fabric\build\devlibs\zergatul.freecam-{version}-dev.jar
    def finalJar = file(devJar.path.replace("devlibs", "libs").replace("-dev.", "."))
    def renamedJar = Paths.get(finalJar.parent, "$archives_base_name-$mod_version-fabric-${minecraft_version}.jar").toFile()

    if (finalJar.exists()) {
        if (renamedJar.exists()) {
            renamedJar.delete()
        }
        finalJar.renameTo(renamedJar)
    } else {
        println "Renaming final JAR failed"
        println "Can't find final JAR at: ${finalJar.path}"
    }
}